{"version":3,"sources":["webpack:///../src/components/list/index.jsx","webpack:///../src/components/list/list.mdx"],"names":["List","render","this","props","children","ListItem","selected","identifier","className","onItemClick","itemProps","length","map","item","index","isSelected","key","onClick","Component","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","of","__position","__code","__scope","Playground","Props","isList","otherProp","name","id","isMDXComponent"],"mappings":"qYAqBMA,E,gLACJC,OAAA,WAAU,IAAD,EASHC,KAAKC,MAPPC,EAFK,EAELA,SACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,SACAC,EALK,EAKLA,WACAC,EANK,EAMLA,UACAC,EAPK,EAOLA,YACAC,EARK,EAQLA,UAEF,OACE,uBACE,kBAAIF,UAAS,SAAUA,GAAa,KACjCJ,EAASO,OACNP,EAASQ,KAAI,SAACC,EAAMC,GAClB,IAAMC,EAAaF,EAAKN,GAAc,QAAUD,EAChD,OAAID,EAEA,YAACA,EAAD,GACEW,IAAKH,EAAKN,GAAc,OACpBM,EACAH,EAHN,CAIEI,MAAOA,EACPN,UAAcO,EAAa,WAAa,GACxCE,QAAS,kBAAOR,EAAcA,EAAYI,GAAQ,SAKpD,oBACEG,IAAKH,EAAKN,GAAc,MACxBO,MAAOA,GACHJ,EAHN,CAIEF,UAAcO,EAAa,WAAa,GACxCE,QAAS,kBAAOR,EAAcA,EAAYI,GAAQ,QAEjDA,MAKT,Q,GA1CKK,aAmDJlB,I,+cChER,IAAMmB,EAAe,Q,6KAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGrB,E,oIACF,mBACD,OAAO,YAACkB,EAAD,KAAeD,EAAiBjB,EAAhC,CAAuCqB,WAAYA,EAAYC,QAAQ,cAI5E,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOC,GAAI1B,EAAMyB,QAAQ,UACzB,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,obAAmcC,QAAS,CAC7e1B,QACAmB,kBACAQ,eACAC,UACA/B,QACCyB,QAAQ,cACb,YAAC,EAAD,CAAMlB,WAAW,KAAKD,SAAU,EAAGI,UAAW,CACxCsB,QAAQ,EACRC,UAAW,SACV5B,SAAU,SAAAQ,GAAI,OAAI,kBAAIL,UAAWK,EAAKP,SAAW,WAAa,IAAKO,EAAKqB,OAAYT,QAAQ,QAChG,CAAC,CACIU,GAAI,EACJD,KAAM,YACL,CACDC,GAAI,EACJD,KAAM,YACL,CACDC,GAAI,EACJD,KAAM,YACL,CACDC,GAAI,EACJD,KAAM,gB,oKAQhBX,EAAWa,gBAAiB","file":"component---src-components-list-list-mdx-026f6cd3ad9183c7dcc2.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./styles.css\";\n\nconst propTypes = {\n  /** Array of elements to list */\n  children: PropTypes.array,\n  /** Component of each element */\n  ListItem: PropTypes.any,\n  /** Unique identifier for detect selected */\n  identifier: PropTypes.string,\n  /** Class of list item */\n  className: PropTypes.string,\n  /** Identifier value of selected item */\n  selected: PropTypes.any,\n  /** Function to trigger on item click (item object will be passed as param) */\n  onItemClick: PropTypes.func,\n  /** Aditional props to pass to each item */\n  itemProps: PropTypes.object\n};\n\nclass List extends Component {\n  render() {\n    const {\n      children,\n      ListItem,\n      selected,\n      identifier,\n      className,\n      onItemClick,\n      itemProps\n    } = this.props;\n    return (\n      <div>\n        <ul className={`list ${className || \"\"}`}>\n          {children.length\n            ? children.map((item, index) => {\n                const isSelected = item[identifier || \"id\"] === selected;\n                if (ListItem) {\n                  return (\n                    <ListItem\n                      key={item[identifier || \"id\"]}\n                      {...item}\n                      {...itemProps}\n                      index={index}\n                      className={`${isSelected ? \"selected\" : \"\"}`}\n                      onClick={() => (onItemClick ? onItemClick(item) : null)}\n                    />\n                  );\n                } else {\n                  return (\n                    <li\n                      key={item[identifier || \"id\"]}\n                      index={index}\n                      {...itemProps}\n                      className={`${isSelected ? \"selected\" : \"\"}`}\n                      onClick={() => (onItemClick ? onItemClick(item) : null)}\n                    >\n                      {item}\n                    </li>\n                  );\n                }\n              })\n            : null}\n        </ul>\n      </div>\n    );\n  }\n}\n\nList.propTypes = propTypes;\n\nexport default List;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/suso/proyectos/react-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport List from \"./index.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"list\"\n    }}>{`List`}</h1>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={List} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'<List\\n  identifier=\\\"id\\\"\\n  selected={2}\\n  itemProps={{ isList: true, otherProp: \\'value\\' }}\\n  ListItem={item => (\\n    <li className={item.selected ? \\'selected\\' : \\'\\'}>{item.name}</li>\\n  )}\\n>\\n  {[\\n    {\\n      id: 1,\\n      name: \\'element1\\',\\n    },\\n    {\\n      id: 2,\\n      name: \\'element2\\',\\n    },\\n    {\\n      id: 3,\\n      name: \\'element3\\',\\n    },\\n    {\\n      id: 4,\\n      name: \\'element4\\',\\n    },\\n  ]}\\n</List>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      List\n    }} mdxType=\"Playground\">\n  <List identifier=\"id\" selected={2} itemProps={{\n        isList: true,\n        otherProp: \"value\"\n      }} ListItem={item => <li className={item.selected ? \"selected\" : \"\"}>{item.name}</li>} mdxType=\"List\">\n    {[{\n          id: 1,\n          name: \"element1\"\n        }, {\n          id: 2,\n          name: \"element2\"\n        }, {\n          id: 3,\n          name: \"element3\"\n        }, {\n          id: 4,\n          name: \"element4\"\n        }]}\n  </List>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}