{"version":3,"sources":["webpack:///../src/components/fileInput/index.jsx","webpack:///../src/components/fileInput/fileInput.mdx"],"names":["FileInput","props","id","Math","floor","random","fileReaders","fileInputRef","React","createRef","dropAreaRef","state","fileList","value","handleFile","bind","asignEventListeners","readFileContent","componentDidUpdate","onChange","this","componentDidMount","window","addEventListener","current","click","handleDragOver","event","stopPropagation","preventDefault","Array","from","target","files","dataTransfer","map","file","index","fr","FileReader","onload","length","readAsText","setState","prevState","name","lastModified","lastModifiedDate","size","type","content","result","evt","dropEffect","render","className","ref","multiple","i","key","icon","onClick","filter","f","fi","Component","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","of","InputFile","__position","__code","__scope","Playground","Props","console","log","isMDXComponent"],"mappings":"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","file":"component---src-components-file-input-file-input-mdx-74dfa7b9d04d0e43c13f.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./styles.css\";\n\nconst propTypes = {\n  /** Value */\n  value: PropTypes.array,\n  /** Name of the field */\n  name: PropTypes.string.isRequired,\n  /** Function thats will be called after change */\n  onChange: PropTypes.func.isRequired\n};\n\nclass FileInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.id = Math.floor(Math.random() * 100000 + 1);\n    this.fileReaders = [];\n    this.fileInputRef = new React.createRef();\n    this.dropAreaRef = new React.createRef();\n\n    this.state = {\n      fileList: props.value ? props.value : []\n    };\n\n    this.handleFile = this.handleFile.bind(this);\n    this.asignEventListeners = this.asignEventListeners.bind(this);\n    this.readFileContent = this.readFileContent.bind(this);\n  }\n\n  componentDidUpdate() {\n    const { onChange } = this.props;\n    const { fileList } = this.state;\n    onChange(fileList);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"DOMContentLoaded\", this.asignEventListeners());\n  }\n\n  asignEventListeners() {\n    this.fileInputRef.current.addEventListener(\n      \"change\",\n      this.handleFile,\n      false\n    );\n    this.dropAreaRef.current.addEventListener(\n      \"click\",\n      () => this.fileInputRef.current.click(),\n      false\n    );\n    this.dropAreaRef.current.addEventListener(\n      \"dragover\",\n      this.handleDragOver,\n      false\n    );\n    this.dropAreaRef.current.addEventListener(\"drop\", this.handleFile, false);\n  }\n\n  handleFile(event) {\n    const { fileList } = this.state;\n\n    event.stopPropagation();\n    event.preventDefault();\n\n    const files = Array.from(event.target.files || event.dataTransfer.files);\n    files.map((file, index) => {\n      const fr = new FileReader();\n      fr.onload = () => this.readFileContent(file, fileList.length + index);\n      this.fileReaders[fileList.length + index] = fr;\n      fr.readAsText(file);\n\n      // this.fileReaders[this.fileReaders.length + index] = new FileReader();\n      // this.fileReaders[\n      //   this.fileReaders.length + index\n      // ].onload = this.readFileContent(file, this.fileReaders.length + index);\n      // this.fileReaders[this.fileReaders.length + index].readAsText(file);\n    });\n  }\n\n  readFileContent(file, index) {\n    this.setState(prevState => ({\n      fileList: [\n        ...prevState.fileList,\n        {\n          name: file.name,\n          lastModified: file.lastModified,\n          lastModifiedDate: file.lastModifiedDate,\n          size: file.size,\n          type: file.type,\n          content: this.fileReaders[index].result\n        }\n      ]\n    }));\n  }\n\n  handleDragOver(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    evt.dataTransfer.dropEffect = \"copy\"; // Explicitly show this is a copy.\n  }\n\n  render() {\n    const { name } = this.props;\n    const { fileList } = this.state;\n\n    return (\n      <div>\n        <div\n          className={`drop-area drop-area-${this.id}`}\n          ref={this.dropAreaRef}\n        >\n          Arrasta ficheros aqu√≠\n        </div>\n        <input\n          className=\"file-input-field\"\n          id={`file-input-${this.id}`}\n          ref={this.fileInputRef}\n          type=\"file\"\n          name={name}\n          multiple\n        />\n        <ul className=\"file-list\">\n          {fileList.map((file, i) => (\n            <span className=\"file\" key={file.name + i}>\n              <FontAwesomeIcon icon=\"file\" className=\"icon\" />\n              <span className=\"file-name\">{file.name}</span>\n              <span\n                className=\"close\"\n                onClick={() =>\n                  this.setState(prevState => ({\n                    fileList: prevState.fileList.filter((f, fi) => i !== fi)\n                  }))\n                }\n              >\n                <FontAwesomeIcon icon=\"times\" />\n              </span>\n            </span>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nFileInput.propTypes = propTypes;\n\nexport default FileInput;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/suso/proyectos/react-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport InputFile from \"./index.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"inputfile\"\n    }}>{`InputFile`}</h1>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={InputFile} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'<InputFile name=\\\"file\\\" onChange={value => console.log(value)} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      InputFile\n    }} mdxType=\"Playground\">\n  <InputFile name=\"file\" onChange={value => console.log(value)} mdxType=\"InputFile\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}